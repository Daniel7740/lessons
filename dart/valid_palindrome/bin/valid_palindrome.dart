//? Является ли строка палиндромом
//(слово, фраза или последовательность символов, которая может быть прочитана слева направо и справа налево такой же). Прежде чем проверять строку, она преобразуется к нижнему регистру, и все символы, которые не являются буквами или цифрами, удаляются. Затем, путем сравнения символов в начале и в конце строки, функция проверяет, является ли строка палиндромом и возвращает результат в форме логического значения.

//? Вариант решения 1
void main(List<String> args) {
  bool isPalindrome(String s) {
    // преобразование всех символов строки к нижнему регистру
    s = s.toLowerCase();

    // удаление всех небуквенно-цифровых символов
    s = s.replaceAll(RegExp('[^a-z0-9]'), '');

    // определение длины строки
    int len = s.length;

    // проверка, является ли строка палиндромом
    for (int i = 0; i < len / 2; i++) {
      if (s[i] != s[len - i - 1]) {
        return false;
      }
    }

    return true;
  }
}

//? Вариант решения 2
// void main(List<String> args) {
//   bool isPalindrome(String s) {
//     // преобразование всех символов строки к нижнему регистру
//     s = s.toLowerCase();

//     // удаление всех небуквенно-цифровых символов
//     s = s.replaceAll(RegExp('[^a-z0-9]'), '');

//     // проверка, является ли строка палиндромом
//     return s == s.split('').reversed.join('');
//   }
// }

// В этом варианте решения вместо цикла для проверки строки на палиндром применяется преобразование строки в массив символов, затем массив переворачивается с помощью метода reversed, а после перевернутый массив символов преобразуется в строку с помощью метода join. Наконец, так полученная строка сравнивается с исходной строкой. Если они равны, то строка является палиндромом, в противном случае нет.
