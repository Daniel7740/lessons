//? Удалить дубликаты из отсортированного массива

// Учитывая целочисленный массив nums, отсортированный в неубывающем порядке, удалите дубликаты на месте, чтобы каждый уникальный элемент появлялся только один раз. Относительный порядок элементов должен быть сохранен. Затем верните количество уникальных элементов в nums.

// Считать, что количество уникальных элементов nums равно k, чтобы быть принятым,
// вам нужно сделать следующие вещи:

// Изменяем массив nums таким образом, чтобы первые k элементов nums содержали уникальные элементы в том порядке, в котором они изначально присутствовали в nums. Остальные элементы nums не важны, как и размер nums.
// Возвращаем k.

//? Вариант решения 1
int removeDuplicates(List<int> nums) {
  if (nums.isEmpty) return 0; // если массив пуст, сразу возвращаем ноль

  int unique = 0; // указатель на уникальный элемент

  for (int i = 1; i < nums.length; i++) {
    // проходим по всем элементам массива, начиная со второго
    if (nums[i] != nums[unique]) {
      // если текущий элемент отличается от предыдущего уникального
      unique++; // увеличиваем указатель на уникальный элемент на один
      nums[unique] = nums[i]; // помещаем текущий элемент на место уникального
    }
  }

  return unique +
      1; // возвращаем количество уникальных элементов (индекс последнего уникального + 1)
}

//? Вариант решения 2
// // создаем класс Solution
// class Solution {
// // создаем метод removeDuplicates, принимающий на вход список nums типа List<int>
//   int removeDuplicates(List<int> nums) {
// // создаем объект set типа Set<int> на основе списка nums
//     Set<int> set = Set.from(nums);
// // создаем список list типа List<int> на основе множества set
//     List<int> list = List.from(set);
// // очищаем список nums от всех элементов
//     nums.clear();
// // добавляем все элементы из списка list в список nums
//     nums.addAll(list);
// // возвращаем длину списка nums после удаления дубликатов
//     return nums.length;
//   }
// }

//? =======Проверка=======
void main() {
  List<int> nums = [1, 1, 2, 2, 2, 3, 4, 5, 5];
  List<int> expectedNums = [1, 2, 3, 4, 5];

  int k = removeDuplicates(nums);

  assert(k == expectedNums.length);
  for (int i = 0; i < k; i++) {
    assert(nums[i] == expectedNums[i]);
  }
}
