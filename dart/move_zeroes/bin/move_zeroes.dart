//? Переместите нули

// При наличии целочисленного массива переместите все 's в его конец, сохраняя относительный порядок ненулевых элементов.nums0

// Обратите внимание, что это необходимо делать на месте, не создавая копию массива.

//? Решение 1
void moveToEnd(List<int> nums) {
  // Инициализируем переменную i на 0 индекс
  int i = 0;
  // Инициализируем переменную j на последний индекс массива nums
  int j = nums.length - 1;

  // Используем цикл while с условием i < j
  // чтобы пройти по всему массиву
  while (i < j) {
    // Если встречаем 0
    if (nums[i] == 0) {
      // То сдвигаем все элементы справа от i на 1 позицию влево,
      // чтобы текущий 0 перешел в крайнюю правую (свободную) позицию
      for (int a = i; a < j; a++) {
        nums[a] = nums[a + 1];
      }
      // И присваиваем 0 элементу с индексом j
      nums[j] = 0;
      // Уменьшаем значение j на 1,
      // чтобы новый 0 находился в свободной позиции справа
      j--;
      // Если элемент не равен 0
    } else {
      // То увеличиваем значение i на 1,
      // чтобы перейти к следующему элементу
      i++;
    }
  }
}

//? Решение 2
// Метод moveZeroes получает на вход целочисленный массив nums
void moveZeroes(List<int> nums) {
  // Инициализируем переменную i на 0
  int i = 0;

  // Используем цикл for для перебора всех элементов массива nums
  // с помощью переменной j
  for (int j = 0; j < nums.length; j++) {
    // Если элемент не равен 0, то он перемещается на начало массива
    if (nums[j] != 0) {
      nums[i] = nums[j];
      i++;
    }
  }

  // Все оставшиеся элементы после последнего ненулевого перемещаются в конец массива
  for (int a = i; a < nums.length; a++) {
    nums[a] = 0;
  }
}

//? Проверка
void main() {
  List<int> nums1 = [0, 1, 0, 3, 12];
  moveZeroes(nums1);
  print(nums1);

  List<int> nums2 = [0];
  moveZeroes(nums2);
  print(nums2);
}
